package handler

import (
	"net/http"
	"generator-go-code/internal/domain/models"
	"generator-go-code/internal/usecase"
	"strconv"
	"github.com/labstack/echo/v4"
)

type {{.Entity}}Handler struct {
	usecase usecase.{{.Entity}}Usecase
}

func New{{.Entity}}Handler(usecase usecase.{{.Entity}}Usecase) *{{.Entity}}Handler {
	return &{{.Entity}}Handler{usecase: usecase}
}

func (h *{{.Entity}}Handler) Create{{.Entity}}(c echo.Context) error {
	var {{.Entity | ToLower}} models.{{.Entity}}
	if err := c.Bind(&{{.Entity | ToLower}}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	if err := h.usecase.Create{{.Entity}}(&{{.Entity | ToLower}}); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	return c.JSON(http.StatusCreated, {{.Entity | ToLower}})
}

func (h *{{.Entity}}Handler) Get{{.Entity}}ByID(c echo.Context) error {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	{{.Entity | ToLower}}, err := h.usecase.Get{{.Entity}}ByID(id)
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, err.Error())
	}

	return c.JSON(http.StatusOK, {{.Entity | ToLower}})
}

func (h *{{.Entity}}Handler) GetAll{{.Entity}}s(c echo.Context) error {
	{{.Entity | ToLower}}s, err := h.usecase.GetAll{{.Entity}}s()
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	return c.JSON(http.StatusOK, {{.Entity | ToLower}}s)
}

func (h *{{.Entity}}Handler) Update{{.Entity}}(c echo.Context) error {
	var {{.Entity | ToLower}} models.{{.Entity}}
	if err := c.Bind(&{{.Entity | ToLower}}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	if err := h.usecase.Update{{.Entity}}(&{{.Entity | ToLower}}); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	return c.NoContent(http.StatusOK)
}

func (h *{{.Entity}}Handler) Delete{{.Entity}}(c echo.Context) error {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	if err := h.usecase.Delete{{.Entity}}(id); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	return c.NoContent(http.StatusNoContent)
}
